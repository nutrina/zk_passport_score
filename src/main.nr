use dep::std;
use dep::std::println;
use dep::ecrecover;

fn main(
    stamp_hashs: pub [[u8; 32]; 2],
    providers: [[u8; 32]; 2],
    signatures: [[u8; 64]; 2],
    pub_key_x: [u8; 32],
    pub_key_y: [u8; 32],
    trusted_signer: Field
) {
    // Configure the list of supported providers (provider names are byte arrays) - Possibly replace with oed
    // The list is split in 2 parts, the first list will contain the first 128 bits of a hash the second one the rest
    // And the list is expected to be sorted by the numeric value of the hash. Inputs are expected to be passed in in the same order.

    // Order: Facebook, Google

    let valid_providers1:[[u8;32]; 2] = [
        [
            111, 2, 132, 83, 221, 234, 5, 92, 43, 253, 107, 174, 255, 169, 6, 174, 105, 84, 224, 187, 144, 8, 62, 75, 118, 200, 96, 88, 233, 226, 192, 138
        ], [
            246, 16, 248, 128, 133, 245, 149, 91, 204, 181, 4, 49, 225, 49, 90, 40, 51, 85, 34, 216, 123, 229, 0, 15, 243, 52, 39, 76, 201, 152, 87, 65
        ]
    ];
    // The list of weights fr each supported provider
    let weights:[u32; 2] = [10, 20];
    let mut score = 0;

    for i in 0..2 {
        // verify_stamp(
        //     stamp_hashs[i],
        //     providers[i],
        //     trusted_signer,
        //     pub_key_x,
        //     pub_key_y,
        //     signatures[i]
        // );

        assert(providers[i] == valid_providers1[i]);

        // Not the best check, but it should safe enough since we sign the message/hash off chain/circuit?
        if stamp_hashs[i] != [
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            ] {

            // If conditions are all met increment points
            score += weights[i];
        }
    }

    assert(score >= 30, "Unsufficient Score");
}

#[test]
fn test_main() {
    main(
        [
        [
            1, 1, 1, 1,
            1, 1, 1, 1,
            1, 1, 1, 1,
            1, 1, 1, 1,
            1, 1, 1, 1,
            1, 1, 1, 1,
            1, 1, 1, 1,
            1, 1, 1, 1
        ], [
            1, 1, 1, 1,
            1, 1, 1, 1,
            1, 1, 1, 1,
            1, 1, 1, 1,
            1, 1, 1, 1,
            1, 1, 1, 1,
            1, 1, 1, 1,
            1, 1, 1, 1
        ]
    ],
        [
        [
            111, 2, 132, 83, 221, 234, 5, 92, 43, 253, 107, 174, 255, 169, 6, 174, 105, 84, 224, 187, 144, 8, 62, 75, 118, 200, 96, 88, 233, 226, 192, 138
        ], [
            246, 16, 248, 128, 133, 245, 149, 91, 204, 181, 4, 49, 225, 49, 90, 40, 51, 85, 34, 216, 123, 229, 0, 15, 243, 52, 39, 76, 201, 152, 87, 65
        ]
    ],
        [
        [
            1, 1, 1, 1,
            1, 1, 1, 1,
            1, 1, 1, 1,
            1, 1, 1, 1,
            1, 1, 1, 1,
            1, 1, 1, 1,
            1, 1, 1, 1,
            1, 1, 1, 1,
            1, 1, 1, 1,
            1, 1, 1, 1,
            1, 1, 1, 1,
            1, 1, 1, 1,
            1, 1, 1, 1,
            1, 1, 1, 1,
            1, 1, 1, 1,
            1, 1, 1, 1
        ], [
            1, 1, 1, 1,
            1, 1, 1, 1,
            1, 1, 1, 1,
            1, 1, 1, 1,
            1, 1, 1, 1,
            1, 1, 1, 1,
            1, 1, 1, 1,
            1, 1, 1, 1,
            1, 1, 1, 1,
            1, 1, 1, 1,
            1, 1, 1, 1,
            1, 1, 1, 1,
            1, 1, 1, 1,
            1, 1, 1, 1,
            1, 1, 1, 1,
            1, 1, 1, 1
        ]
    ],
        [
        1, 1, 1, 1,
        1, 1, 1, 1,
        1, 1, 1, 1,
        1, 1, 1, 1,
        1, 1, 1, 1,
        1, 1, 1, 1,
        1, 1, 1, 1,
        1, 1, 1, 1
    ],
        [
        1, 1, 1, 1,
        1, 1, 1, 1,
        1, 1, 1, 1,
        1, 1, 1, 1,
        1, 1, 1, 1,
        1, 1, 1, 1,
        1, 1, 1, 1,
        1, 1, 1, 1
    ],
        12345678
    );
}


#[test(should_fail_with = "Unsufficient Score")]
fn test_main_fail() {
    main(
        [
        [
            1, 1, 1, 1,
            1, 1, 1, 1,
            1, 1, 1, 1,
            1, 1, 1, 1,
            1, 1, 1, 1,
            1, 1, 1, 1,
            1, 1, 1, 1,
            1, 1, 1, 1
        ], [
            0, 0, 0, 0,
            0, 0, 0, 0,
            0, 0, 0, 0,
            0, 0, 0, 0,
            0, 0, 0, 0,
            0, 0, 0, 0,
            0, 0, 0, 0,
            0, 0, 0, 0,
        ]
    ],
        [
        [
            111, 2, 132, 83, 221, 234, 5, 92, 43, 253, 107, 174, 255, 169, 6, 174, 105, 84, 224, 187, 144, 8, 62, 75, 118, 200, 96, 88, 233, 226, 192, 138
        ], [
            246, 16, 248, 128, 133, 245, 149, 91, 204, 181, 4, 49, 225, 49, 90, 40, 51, 85, 34, 216, 123, 229, 0, 15, 243, 52, 39, 76, 201, 152, 87, 65
        ]
    ],
        [
        [
            1, 1, 1, 1,
            1, 1, 1, 1,
            1, 1, 1, 1,
            1, 1, 1, 1,
            1, 1, 1, 1,
            1, 1, 1, 1,
            1, 1, 1, 1,
            1, 1, 1, 1,
            1, 1, 1, 1,
            1, 1, 1, 1,
            1, 1, 1, 1,
            1, 1, 1, 1,
            1, 1, 1, 1,
            1, 1, 1, 1,
            1, 1, 1, 1,
            1, 1, 1, 1
        ], [
            1, 1, 1, 1,
            1, 1, 1, 1,
            1, 1, 1, 1,
            1, 1, 1, 1,
            1, 1, 1, 1,
            1, 1, 1, 1,
            1, 1, 1, 1,
            1, 1, 1, 1,
            1, 1, 1, 1,
            1, 1, 1, 1,
            1, 1, 1, 1,
            1, 1, 1, 1,
            1, 1, 1, 1,
            1, 1, 1, 1,
            1, 1, 1, 1,
            1, 1, 1, 1
        ]
    ],
        [
        1, 1, 1, 1,
        1, 1, 1, 1,
        1, 1, 1, 1,
        1, 1, 1, 1,
        1, 1, 1, 1,
        1, 1, 1, 1,
        1, 1, 1, 1,
        1, 1, 1, 1
    ],
        [
        1, 1, 1, 1,
        1, 1, 1, 1,
        1, 1, 1, 1,
        1, 1, 1, 1,
        1, 1, 1, 1,
        1, 1, 1, 1,
        1, 1, 1, 1,
        1, 1, 1, 1
    ],
        12345678
    );
}